name: CD - Release - iOS

on:
  push:
    # tags:
    #   - v*
    branches:
      - ci

jobs:
  setup-fastlane:
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      # - name: Setup Ruby, JRuby and TruffleRuby
      #   uses: ruby/setup-ruby@v1.174.0
      #   with:
      #     ruby-version: '3.3' # Not needed with a .ruby-version file
      #     bundler-cache: true # runs 'bundle install' and caches installed gems automatically
      - name: Setup Cocoapods
        uses: maxim-lobanov/setup-cocoapods@v1
        with:
          version: latest

      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          save-always: 'true'
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install Node.js dependencies
        run: |
          npm cache clean --force
          npm install

      - name: Making iOS Release Code
        run: |
          echo 'STORYBOOK_FIGMA_ACCESS_TOKEN=${{ secrets.STORYBOOK_FIGMA_ACCESS_TOKEN }}' >> .env
          echo 'VITE_ACCESS_EXPIRE=${{ vars.ACCESS_EXPIRE }}' >> .env
          echo 'VITE_APP_URL=${{ vars.APP_URL }}' >> .env
          echo 'VITE_BASE_URL=${{ vars.BASE_URL }}' >> .env
          echo 'VITE_CLIENT_SECRET_TOKEN_CLIENT_ID=${{ secrets.CLIENT_SECRET_TOKEN_CLIENT_ID }}' >> .env
          echo 'VITE_CLIENT_SECRET_TOKEN_REDIRECT_URL=${{ vars.CLIENT_SECRET_TOKEN_REDIRECT_URL }}' >> .env
          echo 'VITE_DAPP_ENV=${{ vars.DAPP_ENV }}' >> .env
          echo 'VITE_ENV=${{ vars.ENV }}' >> .env
          echo 'VITE_GOOGLE_OAUTH_CLIENT_ID=${{ secrets.GOOGLE_OAUTH_CLIENT_ID }}' >> .env
          echo 'VITE_GOOGLE_RECAPTCHA_SITE_KEY=${{ secrets.GOOGLE_RECAPTCHA_SITE_KEY }}' >> .env
          echo 'VITE_JP_STRIPE_PUBLIC_KEY=${{ secrets.JP_STRIPE_PUBLIC_KEY }}' >> .env
          echo 'VITE_LOG_DISCORD_WEBHOOK=${{ secrets.LOG_DISCORD_WEBHOOK }}' >> .env
          echo 'VITE_REFRESH_EXPIRE=${{ vars.REFRESH_EXPIRE }}' >> .env
          echo 'VITE_SOCKET_URL=${{ vars.SOCKET_URL }}' >> .env
          echo 'VITE_STRIPE_PUBLIC_KEY=${{ vars.STRIPE_PUBLIC_KEY }}' >> .env
          npm run make:ios
          ls ios/App

      - name: Generating Assets
        run: |
          npm run build:icons
      
      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.IOS_BUILD_CERTIFICATE_BASE64 }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}
          P12_PASSWORD: ${{ secrets.IOS_BUILD_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.IOS_KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Building iOS App
        run: xcodebuild -scheme "App" clean archive -archivePath "Actions" -configuration "Release Production"

      - name: export ipa
        env:
          EXPORT_PLIST: ${{ secrets. IOS_EXPORT_PRODUCTION}}
        run: |
          # crete export options
          EXPORT_PLIST_PATH=$RUNNER_TEMP/ExportOptions.plist
          echo -n "$EXPORT_PLIST" | base64 --decode --output $EXPORT_PLIST_PATH
          xcodebuild -exportArchive -archivePath $GITHUB_WORKSPACE/Actions.xcarchive -exportOptionsPlist $EXPORT_PLIST_PATH -exportPath $RUNNER_TEMP/export
          
      # - name: Upload iPA
      #   uses: actions/upload-artifact@master
      #   with:
      #     path: $RUNNER_TEMP/export

      - name: Rename the file, remove whitespace
        env:
          SCHEME: App
        run: |
          echo Export directory contents:
          ls $RUNNER_TEMP/export
          mv "$RUNNER_TEMP/export/$SCHEME.ipa" "$RUNNER_TEMP/export/$SCHEME.ipa"
          ls $RUNNER_TEMP/export

      - name: Decode auth. api key file and save it
        env:
          API_KEY_BASE64: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
        run: |
          ls ~/private_keys
          echo -n "$IOS_APPSTORE_AUTH_KEY_BASE64" | base64 --decode --output ~/private_keys/AuthKey_${{ secrets.IOS_APPSTORE_AUTH_KEY_ID }}.p8
          echo "After saving: "
          ls ~/private_keys

      - name: "Upload file to test flight using CLI"
        env:
          SCHEME: App
        run: |
          echo "Starting upload."
          ls ~/private_keys
          xcrun altool --validate-app -f $RUNNER_TEMP/export/$SCHEME.ipa -t ios --apikey ${{ secrets.IOS_APPSTORE_AUTH_KEY_ID}}
          xcrun altool --upload-app -f $RUNNER_TEMP/export/$SCHEME.ipa -t ios --apikey "${{ secrets.IOS_APPSTORE_AUTH_KEY_ID}}

      # - name: Configurating Bundler
      #   run: |
      #     gem install bundler
      #     cp Gemfile ios

      # - name: Installing Fastlane with Bundler
      #   run: |
      #     cd ios
      #     bundle update
      #     bundle install

      # - name: Configurating Fastlane
      #   run: |
      #     export LC_ALL=en_US.UTF-8
      #     export LANG=en_US.UTF-8
      #     cp -R fastlane/ios-config ios
      #     mv ios/ios-config ios/fastlane
      #     cd ios/App
      #     pod install
      #     cd ..
      #     fastlane match appstore --readonly
      #     fastlane beta --verbose
      #   env:
      #     MATCH_GIT_URL: ${{ vars.FASTLANE_MATCH_GIT_URL }}
      #     MATCH_PASSWORD: ${{ secrets.IOS_MATCH_PASSWORD }}
      #     MATCH_GIT_BASIC_AUTHORIZATION: ${{ secrets.FASTLANE_SECRETS_GIT_PAT_TOKEN }}
      #     ASC_KEY_ID: ${{ secrets.IOS_ASC_KEY_ID }}
      #     ASC_ISSUER_ID: ${{ secrets.IOS_ASC_ISSUER_ID }}
      #     ASC_KEY_P8: ${{ secrets.ASC_KEY_P8 }}